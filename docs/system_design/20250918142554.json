{"Implementation approach":"我们将基于FastAPI中间件机制实现trace_id的自动注入与传播，使用contextvars实现异步上下文管理，结合标准logging模块改造日志输出格式，自动附加trace信息。选用轻量级、零依赖方案，通过环境变量配置，支持JSON日志格式。性能埋点通过装饰器实现，可选集成Jaeger。目标是开箱即用、零侵入、高性能。","File list":["main.py","trace_middleware.py","logger.py","decorators.py","config.py","exporter.py"],"Data structures and interfaces":"\nclassDiagram\n    class TraceMiddleware {\n        +__init__(app: FastAPI, enable_performance: bool = False)\n        +__call__(scope: dict, receive: callable, send: callable) Awaitable[None]\n    }\n    class TraceContext {\n        +trace_id: str\n        +parent_span_id: str\n        +start_time: float\n        +spans: list[dict]\n        +__init__()\n        +new_span(name: str) dict\n        +close_span(span: dict)\n        +to_dict() dict\n    }\n    class TraceLogger {\n        +__init__(logger_name: str = \\\"fastapi_trace\\\")\n        +get_logger() logging.Logger\n        +_trace_filter(record: logging.LogRecord) bool\n    }\n    class PerformanceDecorator {\n        +trace_span(name: str) Callable\n    }\n    class Config {\n        +TRACE_HEADER_NAME: str\n        +LOG_FORMAT: str\n        +ENABLE_JSON_LOG: bool\n        +ENABLE_JAEGER: bool\n        +JAEGER_HOST: str\n        +JAEGER_PORT: int\n        +__init__()\n        +load_from_env()\n    }\n    class JaegerExporter {\n        +__init__(config: Config)\n        +export(trace_context: TraceContext)\n    }\n    TraceMiddleware --> TraceContext : creates and manages\n    TraceLogger --> TraceContext : reads current context\n    PerformanceDecorator --> TraceContext : updates spans\n    JaegerExporter --> TraceContext : consumes\n    TraceMiddleware --> Config : reads settings\n    TraceLogger --> Config : reads LOG_FORMAT, ENABLE_JSON_LOG\n    JaegerExporter --> Config : reads JAEGER_* settings\n","Program call flow":"\nsequenceDiagram\n    participant Client as HTTP Client\n    participant FastAPI as FastAPI App\n    participant TM as TraceMiddleware\n    participant TC as TraceContext\n    participant TL as TraceLogger\n    participant PD as PerformanceDecorator\n    participant JE as JaegerExporter\n    participant Config as Config\n    Client->>FastAPI: HTTP Request (with/without trace header)\n    FastAPI->>TM: __call__(scope, receive, send)\n    TM->>Config: load settings\n    TM->>TC: __init__()  # 创建TraceContext实例\n    alt 请求含trace头\n        TM->>TC: 使用传入trace_id\n    else\n        TM->>TC: 生成新trace_id\n    end\n    TM->>contextvars: 设置当前上下文\n    TM->>FastAPI: 继续处理请求（路由/中间件）\n    FastAPI->>PD: @trace_span('db_query')\n    PD->>TC: new_span('db_query')\n    PD->>FastAPI: 执行被装饰函数\n    FastAPI-->>PD: 返回结果\n    PD->>TC: close_span(span)\n    FastAPI->>TL: logger.info('Processing user request')\n    TL->>TC: 读取当前trace_id\n    TL->>logging: 输出含trace_id的日志\n    TM->>JE: 若启用且请求结束，export(trace_context)\n    JE->>Jaeger: 发送span数据\n    TM->>Client: 返回HTTP响应（含trace头）\n    TM->>contextvars: 清理上下文\n","Anything UNCLEAR":"当前设计假设仅用于FastAPI单服务场景，不支持跨服务传播。如需支持分布式追踪（如HTTP头传播到下游服务），需扩展中间件以注入/提取标准协议头（如W3C Trace Context）。可视化UI需依赖Jaeger等外部系统，本项目仅提供导出接口。"}