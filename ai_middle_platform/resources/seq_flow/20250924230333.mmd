
sequenceDiagram
    participant M as Main
    participant AS as APIServer
    participant AC as AIServiceController
    participant AM as AIServiceManager
    participant WC as WorkflowController
    participant WE as WorkflowEngine
    participant AgC as AgentController
    participant AR as AgentRuntime
    participant FC as FunctionCallingController
    participant FCer as FunctionCaller
    participant DB as Database
    participant L as Logger
    participant Mon as Monitor
    
    M->>AS: start()
    AS->>AC: list_models()
    AC->>AM: load_models()
    AM-->>AC: return models
    AC-->>AS: return response
    
    AS->>WC: create_workflow(workflow)
    WC->>WE: compile_workflow(workflow_def)
    WE->>DB: save_workflow(workflow)
    WE-->>WC: return compiled_workflow
    WC-->>AS: return workflow_schema
    
    AS->>AgC: create_agent(agent)
    AgC->>AR: load_agent(agent_id)
    AR->>DB: save_agent(agent)
    AR-->>AgC: return agent_instance
    AgC-->>AS: return agent_schema
    
    AS->>FC: register_function(func_spec)
    FC->>FCer: validate_function_spec(func_spec)
    FCer-->>FC: return validation_result
    FC->>DB: save_function_spec(func_spec)
    FC-->>AS: return registration_result
    
    AS->>WC: execute_workflow(workflow_id, input_data)
    WC->>L: info("Starting workflow execution")
    WC->>WE: execute_workflow(workflow_id, input_data)
    WE->>Mon: record_api_call("execute_workflow", duration, "started")
    loop Workflow Execution
        WE->>AM: invoke_model(model_id, node_data)
        AM->>AIModel: invoke(input_data)
        AIModel-->>AM: return result
        AM-->>WE: return model_result
        WE->>L: log_execution(execution_id, node_result)
    end
    WE->>Mon: record_api_call("execute_workflow", duration, "completed")
    WE-->>WC: return execution_result
    WC-->>AS: return workflow_execution_schema
    
    AS->>AgC: chat_with_agent(agent_id, message)
    AgC->>L: info("Agent chat started")
    AgC->>AR: process_message(agent_id, message)
    AR->>Mon: record_api_call("chat_with_agent", duration, "processing")
    AR->>FCer: execute_function_call(tool_name, parameters)
    FCer->>FCer: handle_callback(callback_url, data)
    FCer-->>AR: return function_result
    AR->>AgentInstance: process(message)
    AgentInstance-->>AR: return response
    AR-->>AgC: return agent_response
    AgC-->>AS: return agent_response_schema
