
classDiagram
    class Main {
        +main() str
    }
    
    class APIServer {
        -config: Config
        +start() None
        +shutdown() None
    }
    
    class AIServiceController {
        +list_models() list[AIModelSchema]
        +invoke_model(model_id: str, input_data: dict) dict
        +get_model_info(model_id: str) AIModelSchema
    }
    
    class WorkflowController {
        +create_workflow(workflow: WorkflowCreateSchema) WorkflowSchema
        +get_workflow(workflow_id: str) WorkflowSchema
        +update_workflow(workflow_id: str, workflow: WorkflowUpdateSchema) WorkflowSchema
        +delete_workflow(workflow_id: str) bool
        +execute_workflow(workflow_id: str, input_data: dict) WorkflowExecutionSchema
    }
    
    class AgentController {
        +create_agent(agent: AgentCreateSchema) AgentSchema
        +get_agent(agent_id: str) AgentSchema
        +update_agent(agent_id: str, agent: AgentUpdateSchema) AgentSchema
        +delete_agent(agent_id: str) bool
        +chat_with_agent(agent_id: str, message: str) AgentResponseSchema
    }
    
    class FunctionCallingController {
        +register_function(func_spec: FunctionSpecSchema) bool
        +call_function(func_name: str, parameters: dict) FunctionResponseSchema
        +handle_callback(callback_data: dict) bool
    }
    
    class AIServiceManager {
        +load_models() dict[str, AIModel]
        +invoke_model(model_id: str, input_data: dict) dict
        +get_model_status(model_id: str) ModelStatus
    }
    
    class WorkflowEngine {
        +compile_workflow(workflow_def: WorkflowDefinition) ExecutableWorkflow
        +execute_workflow(workflow_id: str, input_data: dict) WorkflowExecutionResult
        +pause_workflow(execution_id: str) bool
        +resume_workflow(execution_id: str) bool
        +cancel_workflow(execution_id: str) bool
    }
    
    class AgentRuntime {
        +load_agent(agent_id: str) AgentInstance
        +process_message(agent_id: str, message: str) AgentResponse
        +get_agent_state(agent_id: str) AgentState
        +reset_agent(agent_id: str) bool
    }
    
    class FunctionCaller {
        +validate_function_spec(func_spec: FunctionSpec) bool
        +execute_function_call(func_name: str, parameters: dict) FunctionResult
        +handle_callback(callback_url: str, data: dict) bool
        +generate_openapi_spec() dict
    }
    
    class Config {
        +api_host: str
        +api_port: int
        +database_url: str
        +redis_url: str
        +log_level: str
    }
    
    class AIModel {
        +model_id: str
        +name: str
        +provider: str
        +capabilities: list[str]
        +config: dict
        +invoke(input_data: dict) dict
    }
    
    class WorkflowDefinition {
        +workflow_id: str
        +name: str
        +nodes: list[NodeDefinition]
        +edges: list[EdgeDefinition]
        +variables: dict
    }
    
    class AgentInstance {
        +agent_id: str
        +name: str
        +system_prompt: str
        +tools: list[str]
        +memory: dict
        +process(message: str) AgentResponse
    }
    
    class Database {
        +save_workflow(workflow: WorkflowSchema) bool
        +get_workflow(workflow_id: str) WorkflowSchema
        +save_agent(agent: AgentSchema) bool
        +get_agent(agent_id: str) AgentSchema
        +log_execution(execution: WorkflowExecutionSchema) bool
    }
    
    class Logger {
        +info(message: str) None
        +error(message: str) None
        +debug(message: str) None
        +log_execution(execution_id: str, data: dict) None
    }
    
    class Monitor {
        +record_api_call(api_name: str, duration: float, status: str) None
        +get_performance_metrics() dict
        +alert_on_failure(execution_id: str) None
    }
    
    Main --> APIServer
    APIServer --> AIServiceController
    APIServer --> WorkflowController
    APIServer --> AgentController
    APIServer --> FunctionCallingController
    
    AIServiceController --> AIServiceManager
    WorkflowController --> WorkflowEngine
    AgentController --> AgentRuntime
    FunctionCallingController --> FunctionCaller
    
    AIServiceManager --> AIModel
    WorkflowEngine --> WorkflowDefinition
    AgentRuntime --> AgentInstance
    
    APIServer --> Config
    WorkflowEngine --> Database
    AgentRuntime --> Database
    
    AIServiceManager --> Logger
    WorkflowEngine --> Logger
    AgentRuntime --> Logger
    FunctionCaller --> Logger
    
    AIServiceManager --> Monitor
    WorkflowEngine --> Monitor
    AgentRuntime --> Monitor
    FunctionCaller --> Monitor
