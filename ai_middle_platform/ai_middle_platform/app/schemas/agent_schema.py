## app/schemas/agent_schema.py
"""
Agent schemas for the AI Middleware Platform.

This module defines the Pydantic schemas for agent operations,
including agent creation, updating, retrieval, and chat responses.
These schemas are used for API request/response validation and serialization.
"""

from typing import Dict, List, Any, Optional
from pydantic import BaseModel, Field


class AgentSchema(BaseModel):
    """
    Pydantic schema for agent representation in API responses.
    
    This schema defines the structure of agent data when it's sent to or
    received from API clients.
    """
    
    agent_id: str = Field(..., description="Unique identifier for the agent")
    name: str = Field(..., description="Human-readable name of the agent")
    system_prompt: str = Field(..., description="System prompt defining the agent's behavior")
    tools: List[str] = Field(
        ..., 
        description="List of tools available to the agent"
    )
    memory: Dict[str, Any] = Field(
        ..., 
        description="Current memory/state of the agent"
    )
    
    class Config:
        orm_mode = True


class AgentCreateSchema(BaseModel):
    """
    Schema for creating a new agent.
    
    This schema defines the structure of data needed to create a new agent.
    """
    
    name: str = Field(..., description="Human-readable name of the agent")
    system_prompt: str = Field(..., description="System prompt defining the agent's behavior")
    tools: List[str] = Field(
        ..., 
        description="List of tools available to the agent"
    )


class AgentUpdateSchema(BaseModel):
    """
    Schema for updating an existing agent.
    
    This schema defines the structure of data needed to update an existing agent.
    All fields are optional to allow partial updates.
    """
    
    name: Optional[str] = Field(None, description="Human-readable name of the agent")
    system_prompt: Optional[str] = Field(None, description="System prompt defining the agent's behavior")
    tools: Optional[List[str]] = Field(
        None, 
        description="List of tools available to the agent"
    )


class AgentResponseSchema(BaseModel):
    """
    Schema for agent response representation in API responses.
    
    This schema defines the structure of agent response data when it's sent
    to API clients.
    """
    
    response: str = Field(..., description="Response generated by the agent")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Metadata about the agent's response")
    
    class Config:
        orm_mode = True

